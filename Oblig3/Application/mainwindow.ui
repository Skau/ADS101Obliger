<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>550</width>
    <height>623</height>
   </rect>
  </property>
  <property name="sizePolicy">
   <sizepolicy hsizetype="Minimum" vsizetype="Minimum">
    <horstretch>0</horstretch>
    <verstretch>0</verstretch>
   </sizepolicy>
  </property>
  <property name="minimumSize">
   <size>
    <width>550</width>
    <height>623</height>
   </size>
  </property>
  <property name="maximumSize">
   <size>
    <width>550</width>
    <height>623</height>
   </size>
  </property>
  <property name="font">
   <font>
    <weight>50</weight>
    <bold>false</bold>
    <strikeout>false</strikeout>
   </font>
  </property>
  <property name="windowTitle">
   <string>Sorting Algorithm Test </string>
  </property>
  <widget class="QWidget" name="centralWidget">
   <layout class="QVBoxLayout" name="verticalLayout">
    <item>
     <layout class="QVBoxLayout" name="vLayout_Main">
      <item>
       <layout class="QVBoxLayout" name="vLayout_Setup">
        <item>
         <layout class="QVBoxLayout" name="vLayout_Titles">
          <item alignment="Qt::AlignHCenter">
           <widget class="QLabel" name="label_SetupTitle">
            <property name="font">
             <font>
              <pointsize>24</pointsize>
             </font>
            </property>
            <property name="text">
             <string>Setup</string>
            </property>
           </widget>
          </item>
          <item alignment="Qt::AlignHCenter">
           <widget class="QLabel" name="label_HoverTip">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
              <italic>true</italic>
             </font>
            </property>
            <property name="text">
             <string>Hover a checkbox, spinbox or button for more info</string>
            </property>
           </widget>
          </item>
         </layout>
        </item>
        <item>
         <layout class="QGridLayout" name="gLayout_CheckBoxes">
          <item row="0" column="0" alignment="Qt::AlignLeft">
           <widget class="QCheckBox" name="selectionCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order)&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt; from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;1) The subarray which is already sorted.&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt;&lt;br/&gt;2) Remaining subarray which is unsorted.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;In every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt;A good thing about selection sort is it never makes more than O(n) swaps and can be useful when memory write is a costly operation.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000;&quot;&gt;Time Complexity:&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt; O(n^2) as there are two nested loops.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000;&quot;&gt;Auxiliary Space:&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt; O(1)&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Selection Sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="0" column="1" alignment="Qt::AlignLeft">
           <widget class="QCheckBox" name="quickCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt;QuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. &lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;So given an array and an element x of that array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; font-style:italic; color:#000000; background-color:#ffffff;&quot;&gt;Worst Case: &lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-style:italic; color:#000000; background-color:#ffffff;&quot;&gt;O&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;(n^2)&lt;br/&gt;The worst case occurs when the partition process always picks greatest / smallest element as pivot and the array is already sorted in increasing / decreasing order. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; font-style:italic; color:#000000; background-color:#ffffff;&quot;&gt;Best Case:&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt; O(nLogn)&lt;br/&gt;The best case occurs when the partition process always picks the middle element as pivot. Even though worst case is more than the average sorting algorithm, QuickSort is faster in practice, because implementing a dynamic solution for where to place the pivot, so that the worst case is less frequent, is relatively easy on most systems and with most real-world data.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Quick Sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="0" column="2" alignment="Qt::AlignLeft|Qt::AlignVCenter">
           <widget class="QCheckBox" name="insertionCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Insertion Sort works the way we sort playing cards in our hands. It's best use is when the number of elements is small. It can also be useful when the input container is almost sorted, i.e only a few elements are misplaced in a complete big array. &lt;/span&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; color:#222222; background-color:#ffffff;&quot;&gt;Sorting is typically done in-place, by iterating up the array, growing the sorted list behind it. At each array position, it checks the value there against the largest value in the sorted list (which is the previous array position checked). If larger, it leaves the element in place and moves to the next. If smaller, it finds the correct position within the sorted list, shifts all the larger values up to make a space, and inserts into that correct position.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000; background-color:#ffffff;&quot;&gt;Time Complexity: &lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Average time is O(n^2). Worst case is when elements are sorted in reverse order. It takes O(n) when elements are already sorted.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000; background-color:#ffffff;&quot;&gt;Auxiliary Space: &lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;O(1)&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Insertion sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="0" column="3" alignment="Qt::AlignLeft|Qt::AlignVCenter">
           <widget class="QCheckBox" name="mergeCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Merge Sort is a Divide and Conquer algorithm. It divides input array in n halves, recursively calls itself for the n halves and then merges the sorted halves.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000; background-color:#ffffff;&quot;&gt;Time complexity:&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt; Merge Sort is O(nLogn) in all 3 cases (worst, average and best) as it always divides the array in two halves and take linear time to merge two halves&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;This is is a much used sorting algorithm, because of its low time complexity.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Merge sort is useful for sorting linked lists. Unlike arrays, linked list nodes may not be adjacent in memory. We can insert items in the middle in O(1) extra space and O(1) time. Therefore merge operation of Merge Sort can be implemented without extra space for linked lists. In linked list to access i’th index, we have to travel each and every node from the head to i’th node as we don’t have a continuous block of memory. Therefore, the overhead increases for something like Quick Sort. Merge Sort accesses data sequentially and the need for random access is low. &lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Merge Sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="1" column="1" alignment="Qt::AlignLeft">
           <widget class="QCheckBox" name="stlSortCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Arial,Helvetica Neue,Helvetica,sans-serif'; font-size:15px; color:#000000;&quot;&gt;std::Sort() is a function provided by the C++ Standard Template Library (STL) for sorting items with random access (vectors and arrays).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Arial,Helvetica Neue,Helvetica,sans-serif'; font-size:15px; font-weight:600; color:#000000;&quot;&gt;Time complexity: &lt;/span&gt;&lt;span style=&quot; font-family:'Arial,Helvetica Neue,Helvetica,sans-serif'; font-size:15px; color:#000000;&quot;&gt;It's mandated to have average case linearithmic O(nLogn) time complexity. Any algorithm may be used so long as that time complexity requirement is met. There is no worst case time complexity requirement.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Arial,Helvetica Neue,Helvetica,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;If a function with guaranteed worst case time complexity is required, &lt;/span&gt;&lt;span style=&quot; font-family:'Arial,Helvetica Neue,Helvetica,sans-serif'; font-size:15px; color:#000000;&quot;&gt;std::stable_sort can be used, which has quasilinear worst case time complexity O(nlog^2n).&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>(STL) std::sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="1" column="0" alignment="Qt::AlignLeft">
           <widget class="QCheckBox" name="binaryTreeCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Binary Search Tree is a node-based binary tree data structure which has the following properties: &lt;br/&gt;1.&lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000;&quot;&gt;The left subtree of a node contains only nodes with keys lesser than the node’s key.&lt;br/&gt;2. The right subtree of a node contains only nodes with keys greater than the node’s key.&lt;br/&gt;3. The left and right subtree each must also be a binary search tree.&lt;br/&gt;4. There must be no duplicate nodes.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000; background-color:#ffffff;&quot;&gt;Time Complexity: &lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;The worst case time complexity of search and insert operations is O(h) where h is the height of the Binary Search Tree. In worst case, we may have to travel from root to the deepest leaf node. The height of a skewed tree may become n and the time complexity of search and insert operation may become O(n).&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Binary Tree Sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="1" column="2" alignment="Qt::AlignHCenter|Qt::AlignVCenter">
           <widget class="QCheckBox" name="stlHeapCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Heap sort is a comparison based sorting technique based on a Binary Heap data structure. A Binary Heap is a complete Binary Tree where items are stored in a special order such that value in a parent node is greater, or smaller, than the values in its two children nodes. The former is called a max heap and the latter is called min heap. Since a Binary Heap is a complete Binary Tree, it can be easily represented as an array (array based representations are space efficient). It is similar to selection sort where we first find the maximum element and place the maximum (or minimum) element at the end. We repeat the same process for remaining elements. &lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; font-weight:600; color:#000000; background-color:#ffffff;&quot;&gt;Time Complexity: &lt;/span&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Overall time complexity of Heap Sort is O(nLogn).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'Open Sans,Helvetica,Arial,Verdana,sans-serif'; font-size:15px; color:#000000; background-color:#ffffff;&quot;&gt;Heap Sort algorithm itself has limited uses because Quick Sort and Merge Sort are usually better in practice. Nevertheless, the Heap data structure is enormously used.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>(STL) Heap Sort</string>
            </property>
            <property name="checked">
             <bool>true</bool>
            </property>
           </widget>
          </item>
          <item row="1" column="3" alignment="Qt::AlignLeft|Qt::AlignVCenter">
           <widget class="QCheckBox" name="bogoCheckBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; color:#222222; background-color:#ffffff;&quot;&gt;Bogo Sort is a highly inefficient sorting algorithm based on the generate and test paradigm.&lt;br/&gt;The&lt;/span&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; color:#000000; background-color:#ffffff;&quot;&gt; function generates random permutations of its input until it finds one that is sorted. It is not particularly useful for sorting. It was implemented just for fun.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; font-weight:600; color:#222222; background-color:#ffffff;&quot;&gt;How it works: &lt;/span&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; color:#222222; background-color:#ffffff;&quot;&gt;It works basically the same as if you were to sort a deck of cards by throwing the deck into the air and picking up the cards at random. If you did not pick them up in a sorted order then throw them all in the air again and repeat until you get a sorted deck.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; font-weight:600; color:#222222; background-color:#ffffff;&quot;&gt;Time complexity: &lt;/span&gt;&lt;span style=&quot; font-family:'sans-serif'; font-size:14px; color:#222222; background-color:#ffffff;&quot;&gt;Best case is O(n), though this takes some serious luck depending on the size of n. Average case is O((n+1)!), which is truly horrible. Worst case it will still be running when the sun dies. I do not recommend using Bogo Sort for sorting any dataset over the size of 10. The time complexity scales extremely fast because of the factorial based complexity.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Bogo Sort</string>
            </property>
           </widget>
          </item>
         </layout>
        </item>
        <item>
         <layout class="QHBoxLayout" name="hLayout_Spinboxes">
          <item>
           <widget class="QLabel" name="label_NumberOfDatasets">
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;The total number of datasets to sort.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Number of datasets (1-1000):</string>
            </property>
           </widget>
          </item>
          <item>
           <widget class="QSpinBox" name="numOfDataSetSpinBox">
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;The total number of datasets to sort.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="minimum">
             <number>1</number>
            </property>
            <property name="maximum">
             <number>1000</number>
            </property>
           </widget>
          </item>
          <item>
           <spacer name="horizontalSpacer_2">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeType">
             <enum>QSizePolicy::Maximum</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>44</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <widget class="QLabel" name="label_SizeOfDatasets">
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Sets the number of elements in the datasets. Each element is a random integer between 1 and 100.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="text">
             <string>Size of the datasets (2-999999):</string>
            </property>
           </widget>
          </item>
          <item alignment="Qt::AlignVCenter">
           <widget class="QSpinBox" name="sizeOfDataSetSpinBox">
            <property name="font">
             <font>
              <pointsize>12</pointsize>
             </font>
            </property>
            <property name="toolTip">
             <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Sets the number of elements in the datasets. Each element is a random number between 1 and 100.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
            </property>
            <property name="suffix">
             <string/>
            </property>
            <property name="prefix">
             <string/>
            </property>
            <property name="minimum">
             <number>2</number>
            </property>
            <property name="maximum">
             <number>999999</number>
            </property>
            <property name="value">
             <number>5000</number>
            </property>
           </widget>
          </item>
         </layout>
        </item>
       </layout>
      </item>
      <item>
       <spacer name="verticalSpacer_3">
        <property name="orientation">
         <enum>Qt::Vertical</enum>
        </property>
        <property name="sizeHint" stdset="0">
         <size>
          <width>20</width>
          <height>40</height>
         </size>
        </property>
       </spacer>
      </item>
      <item>
       <layout class="QHBoxLayout" name="horizontalLayout">
        <item>
         <spacer name="horizontalSpacer_9">
          <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
          <property name="sizeType">
           <enum>QSizePolicy::Minimum</enum>
          </property>
          <property name="sizeHint" stdset="0">
           <size>
            <width>40</width>
            <height>20</height>
           </size>
          </property>
         </spacer>
        </item>
        <item>
         <widget class="QPushButton" name="sortButton">
          <property name="minimumSize">
           <size>
            <width>11</width>
            <height>0</height>
           </size>
          </property>
          <property name="font">
           <font>
            <pointsize>15</pointsize>
           </font>
          </property>
          <property name="toolTip">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;1. Generates x datasets (specified by the left spinbox) of y length (specified by the right spinbox).&lt;/p&gt;&lt;p&gt;2. For each ticked sort algorithm, the program will start sorting the datasets on a new thread. The reason for making this multithreaded is so the program does not freeze while the algorithms are running.&lt;/p&gt;&lt;p&gt;3. The progress box will update based on the status of each algorithm.&lt;/p&gt;&lt;p&gt;4. When an algorithm is finished sorting all the datasets, it will post its total time taken in the list widget.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="text">
           <string>Start</string>
          </property>
          <property name="checkable">
           <bool>false</bool>
          </property>
         </widget>
        </item>
        <item>
         <spacer name="horizontalSpacer_11">
          <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
          <property name="sizeType">
           <enum>QSizePolicy::Minimum</enum>
          </property>
          <property name="sizeHint" stdset="0">
           <size>
            <width>40</width>
            <height>20</height>
           </size>
          </property>
         </spacer>
        </item>
        <item>
         <widget class="QPushButton" name="stopButton">
          <property name="font">
           <font>
            <pointsize>15</pointsize>
           </font>
          </property>
          <property name="toolTip">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Stops all currently working algorithms.&lt;/p&gt;&lt;p&gt;Tip: Use this when you accidentally send a dataset with an element size greater than 10 to Bogo Sort.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="text">
           <string>Stop</string>
          </property>
         </widget>
        </item>
        <item>
         <spacer name="horizontalSpacer_10">
          <property name="orientation">
           <enum>Qt::Horizontal</enum>
          </property>
          <property name="sizeType">
           <enum>QSizePolicy::Minimum</enum>
          </property>
          <property name="sizeHint" stdset="0">
           <size>
            <width>40</width>
            <height>20</height>
           </size>
          </property>
         </spacer>
        </item>
       </layout>
      </item>
      <item>
       <spacer name="verticalSpacer_4">
        <property name="orientation">
         <enum>Qt::Vertical</enum>
        </property>
        <property name="sizeHint" stdset="0">
         <size>
          <width>20</width>
          <height>40</height>
         </size>
        </property>
       </spacer>
      </item>
      <item>
       <layout class="QVBoxLayout" name="vLayout_Progress">
        <item>
         <layout class="QHBoxLayout" name="hLayout_Titles">
          <item>
           <spacer name="horizontalSpacer_7">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeType">
             <enum>QSizePolicy::Minimum</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>37</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item alignment="Qt::AlignHCenter">
           <widget class="QLabel" name="label_Title_Progress">
            <property name="font">
             <font>
              <pointsize>24</pointsize>
             </font>
            </property>
            <property name="text">
             <string>Progress</string>
            </property>
           </widget>
          </item>
          <item>
           <spacer name="horizontalSpacer_8">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeType">
             <enum>QSizePolicy::Minimum</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>95</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item alignment="Qt::AlignHCenter">
           <widget class="QLabel" name="label_Title_TimeSpent">
            <property name="font">
             <font>
              <pointsize>24</pointsize>
             </font>
            </property>
            <property name="text">
             <string>Time spent</string>
            </property>
           </widget>
          </item>
          <item>
           <spacer name="horizontalSpacer_6">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeType">
             <enum>QSizePolicy::Maximum</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>65</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
         </layout>
        </item>
        <item>
         <layout class="QHBoxLayout" name="hLayout_List">
          <item>
           <spacer name="horizontalSpacer_4">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeType">
             <enum>QSizePolicy::Minimum</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>25</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <layout class="QVBoxLayout" name="hLayout_Labels">
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_Selection">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Selection Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_Quick">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Quick Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_Insertion">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Insertion Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_Merge">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Merge Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_BT">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Binary Tree: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_Heap">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Heap Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_stdSort">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>std::Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item alignment="Qt::AlignHCenter">
             <widget class="QLabel" name="plabel_Bogo">
              <property name="font">
               <font>
                <pointsize>12</pointsize>
               </font>
              </property>
              <property name="text">
               <string>Bogo Sort: Not started</string>
              </property>
             </widget>
            </item>
            <item>
             <spacer name="verticalSpacer_2">
              <property name="orientation">
               <enum>Qt::Vertical</enum>
              </property>
              <property name="sizeType">
               <enum>QSizePolicy::Maximum</enum>
              </property>
              <property name="sizeHint" stdset="0">
               <size>
                <width>20</width>
                <height>46</height>
               </size>
              </property>
             </spacer>
            </item>
           </layout>
          </item>
          <item>
           <spacer name="horizontalSpacer">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeType">
             <enum>QSizePolicy::Minimum</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>50</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item>
           <layout class="QVBoxLayout" name="verticalLayout_2">
            <item>
             <widget class="QListWidget" name="timeTakenList"/>
            </item>
            <item>
             <spacer name="verticalSpacer">
              <property name="orientation">
               <enum>Qt::Vertical</enum>
              </property>
              <property name="sizeHint" stdset="0">
               <size>
                <width>20</width>
                <height>18</height>
               </size>
              </property>
             </spacer>
            </item>
           </layout>
          </item>
          <item>
           <spacer name="horizontalSpacer_5">
            <property name="orientation">
             <enum>Qt::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
         </layout>
        </item>
       </layout>
      </item>
     </layout>
    </item>
    <item>
     <layout class="QHBoxLayout" name="vLayout_Status">
      <item alignment="Qt::AlignLeft|Qt::AlignVCenter">
       <widget class="QLabel" name="label_3">
        <property name="sizePolicy">
         <sizepolicy hsizetype="Fixed" vsizetype="Preferred">
          <horstretch>0</horstretch>
          <verstretch>0</verstretch>
         </sizepolicy>
        </property>
        <property name="font">
         <font>
          <pointsize>14</pointsize>
         </font>
        </property>
        <property name="text">
         <string>Status:</string>
        </property>
       </widget>
      </item>
      <item alignment="Qt::AlignLeft">
       <widget class="QLabel" name="label_Running">
        <property name="font">
         <font>
          <pointsize>16</pointsize>
          <weight>75</weight>
          <bold>true</bold>
         </font>
        </property>
        <property name="text">
         <string>Stopped</string>
        </property>
       </widget>
      </item>
      <item>
       <spacer name="horizontalSpacer_3">
        <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
        <property name="sizeHint" stdset="0">
         <size>
          <width>40</width>
          <height>20</height>
         </size>
        </property>
       </spacer>
      </item>
      <item alignment="Qt::AlignLeft">
       <widget class="QLabel" name="label_TimeElapsed">
        <property name="font">
         <font>
          <pointsize>14</pointsize>
         </font>
        </property>
        <property name="text">
         <string>Elapsed time: 0 seconds</string>
        </property>
       </widget>
      </item>
     </layout>
    </item>
   </layout>
  </widget>
  <widget class="QMenuBar" name="menuBar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>550</width>
     <height>20</height>
    </rect>
   </property>
  </widget>
  <widget class="QToolBar" name="mainToolBar">
   <attribute name="toolBarArea">
    <enum>TopToolBarArea</enum>
   </attribute>
   <attribute name="toolBarBreak">
    <bool>false</bool>
   </attribute>
  </widget>
  <widget class="QStatusBar" name="statusBar"/>
 </widget>
 <layoutdefault spacing="6" margin="11"/>
 <resources/>
 <connections/>
</ui>
